package Javademo1;

public class Gc {

	public Gc() {
		// TODO 自动生成的构造函数存根
	}
	public static void main(String[] args) {
		//2.GC相关方法
				/**
				 * 1、强引用

		代码中普遍存在的类似"Object obj = new Object()"这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象

		2、软引用

		描述有些还有用但并非必需的对象。在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围进行二次回收。
		如果这次回收还没有足够的内存，才会抛出内存溢出异常。Java中的类SoftReference表示软引用

		3、弱引用

		描述非必需对象。被弱引用关联的对象只能生存到下一次垃圾回收之前，垃圾收集器工作之后，无论当前内存是否足够，
		都会回收掉只被弱引用关联的对象。Java中的类WeakReference表示弱引用

		4、虚引用

		这个引用存在的唯一目的就是在这个对象被收集器回收时收到一个系统通知，被虚引用关联的对象，和其生存时间完全没关系。
		Java中的类PhantomReference表示虚引用
		*/
		/*判断一个常量是否“废弃常量”比较简单，只要当前系统中没有任何一处引用该常量就好了，
		 * 但是要判定一个类是否“无用的类”条件就要苛刻很多，类需要同时满足以下三个条件：

		1、该类所有实例都已经被回收，也就是说Java堆中不存在该类的任何实例

		2、加载该类的ClassLoader已经被回收

		3、该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法*/
				/**
				 * 主要GC实现方式：标记清除方式   复制收集方式  引用计数方式

				 */
	}

}
